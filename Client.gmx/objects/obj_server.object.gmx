<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_server</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar players, socketlist, gameActive;

broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
players = ds_map_create();
socketlist = ds_list_create();
gameActive = false;

debug = true;

server = network_create_server(network_socket_tcp, 6510, 32); // Start a TCP server on port 6510 with a maximum of 32 players

if (server &lt; 0) { //network_server_create returns a bool. If it returns &lt;0, the game failed to start a server.
    show_message("Server failed to start");
    game_end();
}

// Setup a timer so we can broadcast the server IP out to local clients looking...

seconds = 10;
minutes = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message("stephan is een lieve jongen");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Once a frame, we send ALL attached clients, ALL game sprites (plaeyrs and baddies)

var count = ds_list_size(socketlist);
if( count&gt;0 )
{
    /// Send all sprites to all clients
    global.player_buffer = player_buffer;
    
    // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
    buffer_seek(player_buffer, buffer_seek_start, 0);
    
    // Total number of sprites (players+baddies)
    buffer_write(player_buffer, buffer_u32, global.PlayerTotal + global.BaddieCount );

    // Dummy player x,y...will fill in later. This allows the client to follow themselves in a scrolling level.
    buffer_write(global.player_buffer, buffer_s16, 0 );
    buffer_write(global.player_buffer, buffer_s16, 0 );

    // All attached players
    with(oPlayer)
    {
        buffer_write(global.player_buffer, buffer_s16, x );
        buffer_write(global.player_buffer, buffer_s16, y );
        buffer_write(global.player_buffer, buffer_s16, sprite_index );
        buffer_write(global.player_buffer, buffer_s16, image_index );
        buffer_write(global.player_buffer, buffer_s32, image_blend );
        buffer_write(global.player_buffer, buffer_string, PlayerName );
    }
    
    // Now send all baddies
    with(oBaddie)
    {
        buffer_write(global.player_buffer, buffer_s16, x );
        buffer_write(global.player_buffer, buffer_s16, y );
        buffer_write(global.player_buffer, buffer_s16, sprite_index );
        buffer_write(global.player_buffer, buffer_s16, image_index );
        buffer_write(global.player_buffer, buffer_s32, image_blend );
        buffer_write(global.player_buffer, buffer_string, "");
    }
    var buffer_size = buffer_tell(player_buffer);
        
    // Now send all data... to all clients
    for(i=0;i&lt;count;i++)
    {   
        // get the socket
        var sock = ds_list_find_value(socketlist,i);

        // Write in client location, so it can do a scroll window "follow"
        buffer_seek(player_buffer, buffer_seek_start, 4);

        // Get the player's instance, so we can get it's X,Y
        var inst = ds_map_find_value( Clients, sock);
        buffer_write(global.player_buffer, buffer_s16, inst.x );
        buffer_write(global.player_buffer, buffer_s16, inst.y );

        // Send data to client
        network_send_packet( sock,player_buffer, buffer_size );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    totalseconds = alarm[0] / 60 ;
    minutes = floor(totalseconds / 60);
    seconds = floor(totalseconds % 60);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");

if (eventid == server) {
    NewConnection(); // If the socket ID is the server one, then we have a new client connecting, OR an old client disconnecting
} else {
    ReceiveData(); // If the arrived message isn't a connection or disconnection, we'll process it with this script
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_self();
draw_text(x, y + 60, "Server is hosting.#Connected players: "+string(ds_map_size(players)));
draw_set_halign(fa_left);

if (debug == true) 
{
    draw_text(0, 0, "Framerate: "+string(fps));
    draw_text(0, 20, "Debug mode is on");
    draw_text(0, 40, "alarm 0: "+string(alarm[0]));

    draw_text(0,100, string(minutes)+":"+string(seconds)); //minutes
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
